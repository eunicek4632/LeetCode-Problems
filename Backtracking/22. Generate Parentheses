class Solution {
    int n;
    List<String> list = new LinkedList<String>();
    
    public void recur(String str, int start, int end){
//         Base case to check if the length is longer than the required strings
        if(str.length() >= this.n * 2){
            if(start == end){
                // System.out.println(str);
                this.list.add(str);
            }
            return;
        }

//         if there are more ending parenthesis than the opening ones, it must be illegal 
        if(end >= start){
            this.recur(str + '(', start - 1, end);
            this.recur(str + ')', start, end - 1);
        }
        else{
            return;
        }
    }
    
    public List<String> generateParenthesis(int n) {
        String start = "";
        this.n = n;
        this.recur(start, n, n);
        return this.list;
    }
    
}
